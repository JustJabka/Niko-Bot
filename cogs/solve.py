import disnake
from disnake.ext import commands
from error_handler import error_handler

ROLE_ID = 1291795325618491403 # –†–æ–ª—å –≤ –ø—ñ–Ω–≥—É —ñ —è–∫–∞ –º–æ–∂–µ –∑–∞–∫—Ä–∏—Ç–∏ –≥—ñ–ª–∫—É
FORUM_CHANNEL_ID = 1291795094025801858 # –ì—ñ–ª–∫–∞ –¥–æ–ø–æ–º–æ–≥–∏
TAG_ID = 1291831807926341693 # –¢–µ–≥ [–†–ï–®–ï–ù–û]


class Solve(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    # –ü—ñ–Ω–≥ –≤ —Å–≤—ñ–∂—ñ–π –≥—ñ–ª—Ü—ñ
    @commands.Cog.listener()
    async def on_thread_create(self, thread):
        if thread.parent_id == FORUM_CHANNEL_ID:
            role = thread.guild.get_role(ROLE_ID)
            if role:
                await thread.send(f"–ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —Ä–µ—à—ë–Ω, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ```/resolved```\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é {role.mention} —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –∑–∞–∫—Ä—ã—Ç—å –≤–µ—Ç–∫—É")

    # –ö–æ–º–∞–Ω–¥–∞ /resolved
    @commands.slash_command(name = "resolved",description = "Solve guild")
    async def resolved(self, interaction: disnake.ApplicationCommandInteraction):
        # –Ø–∫—â–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–∞–Ω–∞–ª
        if not isinstance(interaction.channel, disnake.Thread):
            await interaction.response.send_message(f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ç–∫–∞—Ö https://discord.com/channels/1290213702301126688/{FORUM_CHANNEL_ID} üçΩÔ∏è", ephemeral=True)
            return

        thread = interaction.channel
        author_id = thread.owner_id
        tag_to_add = None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —á–µ–ª –º–∞—î —Ä–æ–ª—å –∞–±–æ —î –∞–≤—Ç–æ—Ä–æ–º –≥—ñ–ª–∫–∏
        if ROLE_ID not in [role.id for role in interaction.author.roles] and interaction.author.id != author_id:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ãüçΩÔ∏è", ephemeral=True)
            return

        try:
            if thread.parent.id == FORUM_CHANNEL_ID:
                # –Ø–∫—â–æ –≥—ñ–ª–∫–∞ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞
                if "[–†–ï–®–ï–ù–û‚úÖ]" in thread.name:
                    await interaction.response.send_message("–≠—Ç—É –≤–µ—Ç–∫—É —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æüçΩÔ∏è")
                    return
                
                # –Ø–∫—â–æ –¥–æ–≤–±–æ—Ö—Ä—è–∫ –Ω–∞–ø–∏—Å–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è –≤ –Ω–∞–∑–≤—ñ –≥—ñ–ª–∫–∏
                if len(thread.name) > 89:
                    new_thread_name = thread.name[:89]
                else:
                    new_thread_name = thread.name

                # –Ø–∫—â–æ –≥—ñ–ª–∫–∞ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∞
                for tag in thread.parent.available_tags:
                    if tag.id == TAG_ID:
                        tag_to_add = tag
                        break
                
                if tag_to_add:
                    await interaction.response.send_message("–≠—Ç—É –≤–µ—Ç–∫—É –∑–∞–∫—Ä—ã—Ç–æü•û")
                    await thread.edit(name=f"[–†–ï–®–ï–ù–û‚úÖ] {new_thread_name}", applied_tags = [tag_to_add], archived = True, locked = True)
                else:
                    await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥üçΩÔ∏è", ephemeral=True)
        except Exception as e:
            print(f"Error: {e}")

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    @resolved.error
    async def resolved_error(self, interaction: disnake.ApplicationCommandInteraction, error):
        await error_handler(interaction, error)

def setup(bot):
    bot.add_cog(Solve(bot))